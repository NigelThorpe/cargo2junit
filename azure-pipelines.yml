# Recommened editor for this file: https://github.com/Microsoft/azure-pipelines-vscode
name: cargo
variables:
  CHANNEL: stable
  KEY_SALT: 0
  RUSTCACHE_ROOT: $(Pipeline.Workspace)/rustcache
  CARGO_HOME: $(RUSTCACHE_ROOT)/.cargo
  RUSTUP_HOME: $(RUSTCACHE_ROOT)/.rustup
  SCCACHE_DIR: $(RUSTCACHE_ROOT)/sccache
  SCCACHE_CACHE_SIZE: 1G
  CACHE_KEY_BASE: KEY_SALT=$(KEY_SALT)-$(VM_IMAGE)-$(CHANNEL)-$(TARGET) 
pool:
  vmImage: $(VM_IMAGE)
strategy:
  matrix:

    # # sccache fails to compile
    # vs2015-gnu:
    #   TARGET: x86_64-pc-windows-gnu
    #   VM_IMAGE: vs2015-win2012r2
    # vs2017-gnu:
    #   TARGET: x86_64-pc-windows-gnu
    #   VM_IMAGE: vs2017-win2016
    # vs2019-gnu:
    #   TARGET: x86_64-pc-windows-gnu
    #   VM_IMAGE: windows-2019

    vs2015-msvc:
      TARGET: x86_64-pc-windows-msvc
      VM_IMAGE: vs2015-win2012r2
    vs2017-msvc:
      TARGET: x86_64-pc-windows-msvc
      VM_IMAGE: vs2017-win2016
    vs2019-msvc:
      TARGET: x86_64-pc-windows-msvc
      VM_IMAGE: windows-2019
    osx-10.13-x86_64-apple-darwin:
      TARGET: x86_64-apple-darwin
      VM_IMAGE: macos-10.13
    osx-10.14-x86_64-apple-darwin:
      TARGET: x86_64-apple-darwin
      VM_IMAGE: macos-10.14
    x86_64-unknown-linux-gnu:
      TARGET: x86_64-unknown-linux-gnu
      VM_IMAGE: ubuntu-16.04
steps:
  # set up environment and restore cache
  - bash: |
      rm -Rf "$RUSTCACHE_ROOT"
      echo "##vso[task.prependpath]$(CARGO_HOME)/bin"
    displayName: clean state on private agents
  - task: CacheBeta@0
    inputs:
      cacheHitVar: CACHE_RESTORED
      path: $(RUSTCACHE_ROOT)
      key: '"$(CACHE_KEY_BASE)" | $(Build.SourceVersion)'
      restoreKeys: |
        "$(CACHE_KEY_BASE)"
  - bash: |
      echo REMOVE ME ONCE THIS IS FIXED https://github.com/microsoft/azure-pipelines-tasks/issues/10841
      cd "$RUSTCACHE_ROOT"
      if [ -f "executable.txt" ]; then cat executable.txt | xargs chmod +x; fi
    condition: and(succeeded(), ne(variables['CACHE_RESTORED'], 'false'))
    displayName: 'set executable bit'
  - bash: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path --default-toolchain none
      which rustup && rustup -V
    displayName: Enusure rustup is installed
  - bash: |
      rustup toolchain install $(CHANNEL)-$(TARGET)
      rustup default $(CHANNEL)-$(TARGET)
      rustup component list
      rustup update $(CHANNEL)-$(TARGET)
      which rustup && rustup -V && which cargo && cargo -V && which rustc && rustc -V
    displayName: Select toolchain

  # install tools
  - bash: |
      cargo install sccache
      echo '##vso[task.setvariable variable=RUSTC_WRAPPER]sccache'
      which sccache && sccache --version && sccache --show-stats
    displayName: Install sccache
  - bash: |
      cargo install cargo2junit
      which cargo2junit
    displayName: Install cargo2junit
  - bash: |
      cargo install cargo-cache
      cargo cache
    displayName: Install cargo-cache
    condition: and(succeeded(), ne(variables['TARGET'], 'x86_64-pc-windows-gnu'))
  - bash: |
      cargo install cargo-update
      cargo install-update -a
    displayName: Ensure cargo2junit and others are up-to-date

  # build and test
  - bash: |
      cargo build
    displayName: cargo build
  - bash: |
      cargo test -- -Z unstable-options --format json | tee test_results_debug.json
    displayName: cargo test

  - bash: |
      cargo build --release
    displayName: cargo build --release
  - bash: |
      cargo test --release -- -Z unstable-options --format json | tee test_results_release.json
    displayName: cargo test --release

  # store test results
  - bash: |
      cat test_results_debug.json | cargo2junit > test_results_debug_lkg.xml
      cat test_results_release.json | cargo2junit > test_results_release_lkg.xml
    displayName: convert to junit using LKG cargo2junit
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    inputs: 
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test_results_debug_lkg.xml'
      testRunTitle: LKG_DEBUG_$(System.JobDisplayName)
      buildPlatform: LKG_DEBUG_$(System.JobDisplayName)
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    inputs: 
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test_results_release_lkg.xml'
      testRunTitle: LKG_RELEASE_$(System.JobDisplayName)
      buildPlatform: LKG_RELEASE_$(System.JobDisplayName)
    condition: succeededOrFailed()

  # self-host: store test results using the cargo2junit that was just built
  - bash: |
      cat test_results_debug.json | ./target/debug/cargo2junit > test_results_debug.xml
      cat test_results_release.json | ./target/debug/cargo2junit > test_results_release.xml
    displayName: convert to junit using just-built cargo2junit
  - task: PublishTestResults@2
    inputs: 
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test_results_debug.xml'
      testRunTitle: DEBUG_$(System.JobDisplayName)
      buildPlatform: DEBUG_$(System.JobDisplayName)
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    inputs: 
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test_results_release.xml'
      testRunTitle: RELEASE_$(System.JobDisplayName)
      buildPlatform: RELEASE_$(System.JobDisplayName)
    condition: succeededOrFailed()

  # some cleanup before the cache
  - bash: |
      sccache --show-stats
      sccache --stop-server
    displayName: shutdown sccache
  - bash: |
      cargo cache
      cargo cache --autoclean
      cargo cache
    displayName: run cargo cache --autoclean
    condition: and(succeeded(), ne(variables['TARGET'], 'x86_64-pc-windows-gnu'))
  - bash: |
      set -x
      cd "$RUSTCACHE_ROOT"
      rm .artifactignore
      echo \# Include .git folders>.artifactignore
      for i in $(find . -name .git)
      do
        i=${i:2}
        echo \!$i>>.artifactignore
      done
      cat .artifactignore
    displayName: set up .artifactignore to keep .git folders
  - bash: |
      echo REMOVE ME ONCE THIS IS FIXED https://github.com/microsoft/azure-pipelines-tasks/issues/10841
      cd "$RUSTCACHE_ROOT"
      rm executable.txt
      find . -perm +111 >> executable.txt
      find . -executable >> executable.txt
      cat executable.txt
    displayName: Save list of files with executable bit set
