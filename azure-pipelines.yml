# Recommened editor for this file: https://github.com/Microsoft/azure-pipelines-vscode
name: cargo
pool:
  vmImage:  $[ variables['HOST_IMAGE'] ]
strategy:
  matrix:
    x86_64-pc-windows-gnu:
      TARGET: x86_64-pc-windows-gnu
      HOST_IMAGE: vs2017-win2016
      CHANNEL: stable
    x86_64-pc-windows-msvc:
      TARGET: x86_64-pc-windows-msvc
      HOST_IMAGE: vs2017-win2016
      CHANNEL: stable
    x86_64-apple-darwin:
      TARGET: x86_64-apple-darwin
      HOST_IMAGE: macos-10.13
      CHANNEL: stable
    x86_64-unknown-linux-gnu:
      TARGET: x86_64-unknown-linux-gnu
      HOST_IMAGE: ubuntu-16.04
      CHANNEL: stable
steps:
  - bash: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-host $TARGET --default-toolchain $CHANNEL
      export PATH=$PATH:~/.cargo/bin
      echo "##vso[task.setvariable variable=PATH;]$PATH"
    condition: and(succeeded(), eq(variables['Agent.OS'],'Darwin'))
    displayName: Install rustup and toolchain [OSX]
  - bash: |
      rustup toolchain install $CHANNEL-$TARGET
      rustup default $CHANNEL-$TARGET
    displayName: Select toolchain
  - script: |
      rustc -V
      cargo -V
    displayName: Check rustc and cargo versions
  - script: |
      cargo install cargo2junit
    displayName: Install cargo2junit
  - script: |
      cargo build
    displayName: build
  - script: |
      cargo test -- -Z unstable-options --format json > test_results.json
      type test_results.json
    condition: and(succeeded(), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: run cargo test [Windows]
  - script: |
      cargo test -- -Z unstable-options --format json | tee test_results.json
    condition: and(succeeded(), ne(variables['Agent.OS'],'Windows_NT'))
    displayName: run cargo test [Linux & OSX]
  - script: |
      type test_results.json | cargo2junit > test_results_lkg.xml
    condition: and(succeededOrFailed(), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: convert to junit [Windows]
  - script: |
      cat test_results.json | cargo2junit > test_results_lkg.xml
    condition: and(succeededOrFailed(), ne(variables['Agent.OS'],'Windows_NT'))
    displayName: convert to junit [Linux & OSX]
  - task: PublishTestResults@2
    inputs: 
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test_results_lkg.xml'
      testRunTitle: LKG_$(System.JobDisplayName)
      buildPlatform: LKG_$(System.JobDisplayName)
    condition: succeededOrFailed()
  - script: |
      type test_results.json | .\target\debug\cargo2junit.exe > test_results.xml
    condition: and(succeededOrFailed(), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: convert to junit [Windows]
  - script: |
      cat test_results.json | ./target/debug/cargo2junit > test_results.xml
    condition: and(succeededOrFailed(), ne(variables['Agent.OS'],'Windows_NT'))
    displayName: convert to junit [Linux & OSX]
  - task: PublishTestResults@2
    inputs: 
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test_results.xml'
      testRunTitle: $(System.JobDisplayName)
      buildPlatform: $(System.JobDisplayName)
    condition: succeededOrFailed()
