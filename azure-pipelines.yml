# Recommened editor for this file: https://github.com/Microsoft/azure-pipelines-vscode
name: cargo
variables:
  CHANNEL: stable
pool:
  vmImage:  $(VM_IMAGE)
strategy:
  matrix:
    x86_64-pc-windows-gnu:
      TARGET: x86_64-pc-windows-gnu
      VM_IMAGE: vs2017-win2016
    x86_64-pc-windows-msvc:
      TARGET: x86_64-pc-windows-msvc
      VM_IMAGE: vs2017-win2016
    vs2015:
      TARGET: x86_64-pc-windows-msvc
      VM_IMAGE: vs2015-win2012r2
    vs2019:
      TARGET: x86_64-pc-windows-msvc
      VM_IMAGE: windows-2019
    osx-10.13-x86_64-apple-darwin:
      TARGET: x86_64-apple-darwin
      VM_IMAGE: macos-10.13
    osx-10.14-x86_64-apple-darwin:
      TARGET: x86_64-apple-darwin
      VM_IMAGE: macos-10.14
    x86_64-unknown-linux-gnu:
      TARGET: x86_64-unknown-linux-gnu
      VM_IMAGE: ubuntu-16.04
steps:
  - bash: |
      set -x
      ls $HOME/.cargo/bin
      ls $RUSTUP_HOME
      ls /usr/local/rustup
      ls $CARGO_HOME
      ls /usr/local/cargo
      rustup toolchain list
      rustc -V
      cargo -V
    displayName: Check rustc and cargo versions (before rustup install)
    condition: and(succeededOrFailed(), eq(variables['Agent.OS'],'Linux'))
  - bash: |
      set -x
      curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path --default-toolchain none
      echo "##vso[task.prependpath]$HOME/.cargo/bin"
    displayName: Enusure rustup is installed
  - bash: |
      set -x
      rustup toolchain install --no-self-update $CHANNEL-$TARGET
      rustup default $CHANNEL-$TARGET
    displayName: Select toolchain
  - bash: |
      set -x
      rustup toolchain list
      rustc -V
      cargo -V
      ls
    displayName: Check rustc and cargo versions
  - bash: |
      cargo install cargo2junit
    displayName: Install cargo2junit
  - bash: |
      cargo build
    displayName: build
  - bash: |
      cargo test -- -Z unstable-options --format json | tee test_results.json
    displayName: run cargo test
  - bash: |
      cat test_results.json | cargo2junit > test_results_lkg.xml
    displayName: convert to junit using LKG cargo2junit
  - task: PublishTestResults@2
    inputs: 
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test_results_lkg.xml'
      testRunTitle: LKG_$(System.JobDisplayName)
      buildPlatform: LKG_$(System.JobDisplayName)
    condition: succeededOrFailed()
  - bash: |
      cat test_results.json | ./target/debug/cargo2junit > test_results.xml
    displayName: convert to junit using just-built cargo2junit
  - task: PublishTestResults@2
    inputs: 
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test_results.xml'
      testRunTitle: $(System.JobDisplayName)
      buildPlatform: $(System.JobDisplayName)
    condition: succeededOrFailed()
